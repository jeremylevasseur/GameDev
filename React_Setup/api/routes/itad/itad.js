var express = require('express'), router = express.Router();
const baseURL = "https://www.nautilusdevelopment.ca/api/";

const mysql = require('mysql');
const util = require('util');
const CryptoJS = require("crypto-js");
var crypto = require('crypto');
const multer = require('multer');

const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, './uploads/api/');
    },
    filename: function(req, file, cb) {
        cb(null, Date.now() + "_" + file.originalname);
    }
});

const fileFilter = (req, file, cb) => {
    console.log(file.mimetype)
    if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/jpg' || file.mimetype === 'image/png' || file.mimetype === 'text/plain') {
        cb(null, true);
    } else {
        cb(new Error('File type is not allowed.'), false);
    }
}

const upload = multer({
    storage: storage,
    fileFilter: fileFilter
});

var pool = mysql.createPool({
    connectionLimit: 50,
    host: 'mysql1',
    user: 'root',
    password: 'secret',
    database: 'base_db',
    timezone: 'utc'
});


/*
=========================== ENDPOINTS =============================

1)      POST    /api/itad/v1/create_new_user

2)      POST    /api/itad/v1/authenticate

3)      POST    /api/itad/v1/session_token_to_jwt

4)      POST    /api/itad/v1/change_my_password

5)      POST    /api/itad/v1/update_user_information

6)      POST    /api/itad/v1/edit_my_profile

7)      GET     /api/itad/v1/get_my_profile_data

8)      GET     /api/itad/v1/get_user_data

9)      GET     /api/itad/v1/get_all_users_data

10)     GET     /api/itad/v1/get_admin_data

11)     POST    /api/itad/v1/update_absences

12)     POST    /api/itad/v1/upload_photo

13)     POST    /api/itad/v1/send_command

14)     POST    /api/itad/v1/update_command_status

15)     POST    /api/itad/v1/complete_command

16)     GET     /api/itad/v1/get_command_status

17)     POST    /api/itad/v1/update_robot_status

18)     GET     /api/itad/v1/get_robot_status

19)     POST    /api/itad/v1/update_robot_charge_level

20)     GET     /api/itad/v1/get_robot_charge_level

21)     GET     /api/itad/v1/get_available_commands

22)     GET     /api/itad/v1/get_all_robot_commands

23)     GET     /api/itad/v1/get_focused_robot_commands


*/


// Base itad route

router.get("/v1/", (req, res) => {
    console.log("Responding to root");
    res.send("Hello from itad route");
});

router.post('/v1/create_new_user', function (req, res) {
    /*

        There are two types of accounts that are distinguishable by their `type_of_account` field:
        1 = regular user account

            Only able to see data relating to themselves. Able to write data to their account.
            All accounts will be initially created with these level of permissions.

        2 = admin user account

            Able to see data for all accounts. Able to write data to any account.
            
        
        The following fields will be generated by default within this block of code:
            
            type_of_account             ==>     1
            user_number_of_absences     ==>     0
            user_token                  ==>     A signed JSON Web Token (JWT)
        
        
        The post request body must be of the form:
        {
            "email": "example@email.com",
            "username": "Example Username",
            "password": "Example Password",
            "groupCode": "aposdjhgfaaasdf"
        }
        
        The return object will contain the JWT and will take the form:

        {
            "jwt": signedToken
        }

    */

    var userEmail = req.body.email;
    var username = req.body.username;
    var password = req.body.password;
    var groupCode = req.body.groupCode;

    if ((typeof userEmail !== 'undefined') && (typeof username !== 'undefined') && (typeof password !== 'undefined') && (typeof groupCode !== 'undefined') ) {

        // Generating the JWT
        var signedToken = generateJWT(username, password);

        var queryString = "SELECT * FROM `group_data` WHERE group_code = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [groupCode], function (err2, records1, fields1) {
                    if (!err2) {
                        if (records1.length == 1) {
                            queryString = "INSERT INTO `itad_user_data` (`user_index`, `group_code`, `type_of_account`, `username`, `password`, `user_first_name`, `user_last_name`, `user_email`, `user_phone_number`, `user_fax_number`, `profile_picture_file_path`, `user_token`, `account_creation_date`) VALUES (NULL, ?, '1', ?, ?, NULL, NULL, ?, NULL, NULL, 'https://www.nautilusdevelopment.ca/api/placeholder.png', ?, CURRENT_TIMESTAMP);";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [groupCode, username, password, userEmail, signedToken], function (err4, records2, fields2) {
                                        if (!err4) {
                                            
                                            var returnData = {
                                                "jwt": signedToken
                                            };
                    
                                            res.send(returnData);

                                        } else if (err4['sqlMessage'].includes("Duplicate entry")) {
                                            
                                            var returnData = {
                                                "error": "The username is already taken."
                                            };
                    
                                            res.send(returnData);
                                        } else {
                                            console.log(err4);
                                        }
                                        
                                        conn2.release();
                                    });
                                }
                            });

                        } else {

                            var returnData = {
                                "error": "The group code is invalid."
                            };
                            res.send(returnData);
                        }
                    }

                    conn1.release();
                });
            }
        });

    } else {
        var returnData = {
            "error": "There is an error within the post request."
        };
        res.send(returnData);
    }

});


router.post('/v1/authenticate', function (req, res) {
    /*
        This endpoint takes in the user's credentials and returns their unique JSON Web Token.

        The post request body must be of the form:
        {
            "username": "Example Username",
            "password": "Example Password"
        }
        
        The return object will contain the JWT and will take the form:

        {
            "jwt": signedToken
        }

    */

    var username = req.body.username;
    var password = req.body.password;
    
    if ((typeof username !== 'undefined') && (typeof password !== 'undefined') ) {

        var queryString = "SELECT `type_of_account`, `user_token` FROM `itad_user_data` WHERE username = ? AND password = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
            } else {
                conn1.query(queryString, [username, password], function (err2, records1, fields1) {
                    if (!err2) {

                        if (records1.length == 1) {
                            // Users credentials are correct, must first determine if there is already a user session
                            
                            var userJWT = records1[0]['user_token'];
                            var typeOfAccount  = records1[0]['type_of_account'];
                            var currentUnixTimestamp = new Date().getTime();
                            queryString = "SELECT * FROM `itad_user_session_data` WHERE user_jwt_token = ?;"

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userJWT], function (err4, records2, fields2) {
                                        if (!err4) {

                                            if (records2.length == 1) {
                                                // There is already a session token and we must check if it is still valid
                                                console.log("There is already a session token and we must check if it is still valid");

                                                var sessionTokenId = records2[0]['session_id'];
                                                var sessionToken = records2[0]['session_key'];
                                                var sessionDeadline = Number(records2[0]['session_deadline']);
                                                currentUnixTimestamp = new Date().getTime();
                                                console.log(currentUnixTimestamp);
                                                console.log(sessionDeadline);
                                                if (currentUnixTimestamp < sessionDeadline) {
                                                    // The session token is still valid
                                                    var returnData = {
                                                        "jwt": userJWT,
                                                        "session_token": sessionToken,
                                                        "typeOfAccount": typeOfAccount
                                                    };
                                                    res.send(returnData);
                                                } else {
                                                    // The session token has expired and we must create a new one
                                                    sessionToken = String(generateSessionToken());
                                                    sessionDeadline = String(new Date().getTime() + (60*60*1000)); // An hour from now
                                                    queryString = "UPDATE `itad_user_session_data` SET `session_key` = ?, `session_deadline` = ? WHERE `itad_user_session_data`.`session_id` = ?;"

                                                    pool.getConnection(function(err5, conn3) {
                                                        if (err5) {
                                                            res.send(err5);
                                                            console.log(err5);
                                                        } else {
                                                            conn3.query(queryString, [sessionToken, sessionDeadline, sessionTokenId], function (err6, records3, fields3) {
                                                                if (!err6) {
                                                                    
                                                                    var returnData = {
                                                                        "jwt": userJWT,
                                                                        "session_token": sessionToken,
                                                                        "typeOfAccount": typeOfAccount
                                                                    };
                                        
                                                                    res.send(returnData);
                        
                                                                }
                                            
                                                                conn3.release();
                                                            });
                                                        }
                                                    });

                                                }


                                            } else {
                                                // Must create a new session token
                                                console.log("Must create a new session token");

                                                var sessionToken = String(generateSessionToken());
                                                var sessionDeadline = String(new Date().getTime() + (60*60*1000)); // An hour from now
                                                queryString = "INSERT INTO `itad_user_session_data` (`session_id`, `user_jwt_token`, `session_key`, `session_deadline`) VALUES (NULL, ?, ?, ?);"

                                                pool.getConnection(function(err5, conn3) {
                                                    if (err5) {
                                                        res.send(err5);
                                                        console.log(err5);
                                                    } else {
                                                        conn3.query(queryString, [userJWT, sessionToken, sessionDeadline], function (err6, records3, fields3) {
                                                            if (!err6) {
                                                                
                                                                var returnData = {
                                                                    "jwt": userJWT,
                                                                    "session_token": sessionToken,
                                                                    "typeOfAccount": typeOfAccount
                                                                };
                                    
                                                                res.send(returnData);
                    
                                                            }
                                        
                                                            conn3.release();
                                                        });
                                                    }
                                                });
                                            }
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {

                            var returnData = {
                                "error": "The username or password is incorrect."
                            };

                            res.send(returnData);
                        }
                        
                    }

                    conn1.release();
                });
            }
        });

    } else {
        var returnData = {
            "error": "There is an error within the post request."
        };
        res.send(returnData);
    }

});


router.post('/v1/session_token_to_jwt', function (req, res) {
    /*
        This endpoint takes in the user's credentials and returns their unique JSON Web Token.

        The post request body must be of the form:
        {
            "sessionToken": "Tb31oAN/Rb1XTrrPOySFww=="
        }
        
        The return object will contain the JWT and will take the form:

        {
            "jwt": signedToken
        }

    */

    var sessionToken = req.body.sessionToken;
    if (typeof sessionToken !== 'undefined') {

        var queryString = "SELECT * FROM `itad_user_session_data` WHERE session_key = ?;";
        pool.getConnection(function(err, conn) {
            if (err) {
                res.send(err);
            } else {
                conn.query(queryString, [sessionToken], function (err2, records, fields) {
                    if (!err2) {

                        if (records.length == 1) {
                            // There is an equivalent session token, must check if it's valid
                            var userJWT = records[0]['user_jwt_token'];
                            var sessionDeadline  = Number(records[0]['session_deadline']);
                            var currentUnixTimestamp = new Date().getTime();
                            if (currentUnixTimestamp < sessionDeadline) {
                                // The session token is still valid
                                var returnData = {
                                    "jwt": userJWT
                                };
                                res.send(returnData);

                            } else {
                                // The session token is no longer valid, the user must authenticate themselves again

                                var returnData = {
                                    "error": "User must authenticate themselves again."
                                };
                                res.send(returnData);
                            }

                        } else {
                            // There is no equivalent session token, user must authenticate themselves again
                            
                            var returnData = {
                                "error": "User must authenticate themselves again."
                            };

                            res.send(returnData);
                        }
                        
                    }

                    conn.release();
                });
            }
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/change_my_password', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/change_my_password?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "username": "username",
            "password": "password"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var username = req.body.username;
    var password = req.body.password;

    if ((typeof jwt !== 'undefined') && (typeof username !== 'undefined') && (typeof password !== 'undefined')) {

        // Generating the JWT
        var newSignedToken = generateJWT(username, password);

        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `itad_user_data` SET password = ?, user_token = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [password, newSignedToken, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var returnData = {
                                                "jwt": newSignedToken
                                            };
                    
                                            res.send(returnData);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/update_user_information', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/update_user_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "userFirstName": "Example First Name",
            "userLastName": "Example Last Name",
            "userEmail": "example@email.ca",
            "userPhoneNumber": "6136136136",
            "userFaxNumber": "6136136136"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var userFirstName = req.body.userFirstName;
    var userLastName = req.body.userLastName;
    var userEmail = req.body.userEmail;
    var userPhoneNumber = req.body.userPhoneNumber;
    var userFaxNumber = req.body.userFaxNumber;

    
    if ((typeof jwt !== 'undefined') && (typeof userFirstName !== 'undefined') && (typeof userLastName !== 'undefined') && (typeof userEmail !== 'undefined') && (typeof userPhoneNumber !== 'undefined') && (typeof userFaxNumber !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `itad_user_data` SET user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userFirstName, userLastName, userEmail, userPhoneNumber, userFaxNumber, userWebsite, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/edit_my_profile', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/edit_my_profile?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "userFirstName": "Example First Name",
            "userLastName": "Example Last Name",
            "username": "exampleusername",
            "userEmail": "example@email.ca",
            "userPhoneNumber": "6136136136",
            "userFaxNumber": "6136136136"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var userFirstName = req.body.userFirstName;
    var userLastName = req.body.userLastName;
    var username = req.body.username;
    var userEmail = req.body.userEmail;
    var userPhoneNumber = req.body.userPhoneNumber;
    var userFaxNumber = req.body.userFaxNumber;
    var userWebsite = req.body.userWebsite;

    
    if ((typeof jwt !== 'undefined') && (typeof userFirstName !== 'undefined') && (typeof userLastName !== 'undefined') && (typeof userEmail !== 'undefined') && (typeof userPhoneNumber !== 'undefined') && (typeof userFaxNumber !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `itad_user_data` SET username = ?, user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [username, userFirstName, userLastName, userEmail, userPhoneNumber, userFaxNumber, userWebsite, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_my_profile_data", (req, res) => {
    /*
        This endpoint is for requesting the data of the current user

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/update_user_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        
        The return object will contain the users data in JSON form:
        [
            {
                "user_index": 3,
                "group_code": "adskgjasd"
                "user_first_name": "Echo",
                "user_last_name": "Foxtrot",
                "user_email": "echo.foxtrot@gmail.com",
                "user_phone_number": "1234567890",
                "user_fax_number": "1234567890"
                "profile_picture_file_path": "http://192.168.1.16:8081/1597792652538_echofoxtrot.png",
                "account_creation_date": "2020-08-18T19:17:32.000Z"
            }
        ]

    */

    // Parameters
    var jwt = req.query.jwt;

    if (typeof jwt !== 'undefined') {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "SELECT user_index, group_code, type_of_account, username, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, profile_picture_file_path, account_creation_date FROM `itad_user_data` WHERE user_index = ? AND group_code = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("The JSON web token is not valid.");
    }
    

});


router.get("/v1/get_user_data", (req, res) => {
    /*
        This endpoint is for requesting the data of a specific user

        The JSON Web Token and the user index must be a query parameter in the url
            Example: /itad/api/v1/get_user_data?userIndex=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        
        The return object will contain the users data in JSON form:
        [
            {
                "user_index": 3,
                "user_first_name": "Echo",
                "user_last_name": "Foxtrot",
                "user_email": "echo.foxtrot@gmail.com",
                "user_phone_number": "1234567890",
                "user_fax_number": "1234567890",
                "profile_picture_file_path": "http://192.168.1.16:8081/1597792652538_echofoxtrot.png",
                "account_creation_date": "2020-08-18T19:17:32.000Z"
            }
        ]

    */

    // Parameters
    var targetUserIndex = req.query.userIndex;
    var jwt = req.query.jwt;

    if ((typeof targetUserIndex !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var requestingUserIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, profile_picture_file_path, account_creation_date FROM `itad_user_data` WHERE user_index = ? AND group_code = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [targetUserIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("The JSON web token is not valid.");
    }
    

});


router.get("/v1/get_all_users_data", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/get_all_users_data?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, profile_picture_file_path, account_creation_date FROM `itad_user_data` WHERE user_index != ? AND group_code = ? ORDER BY user_first_name;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("The JSON web token is not valid.");
    }

});


router.post("/v1/upload_photo", upload.single('profilePicture'), (req, res) => {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /itad/api/v1/upload_photo?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        The post request must have the following header:
            Content-Type: multipart/form-data
        
        The key for the picture must be 'profilePicture'.

        { 
            fieldname: 'profilePicture',
            originalname: '12.jpg',
            encoding: '7bit',
            mimetype: 'image/jpeg',
            destination: 'uploads/',
            filename: 'b186f7e6afcd5fbc95665c2ad38812da',
            path: 'uploads/b186f7e6afcd5fbc95665c2ad38812da',
            size: 771037 
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var profilePictureFilePath = baseURL + req.file.filename;

    if (typeof profilePictureFilePath !== 'undefined') {
    
        var queryString = "SELECT user_index, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userAccountType = records1[0]['type_of_account'];
                            
                            // New query string
                            queryString = "UPDATE `itad_user_data` SET profile_picture_file_path = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [profilePictureFilePath, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var returnData = {
                                                "profilePictureFilePath": profilePictureFilePath
                                            };
                    
                                            res.send(returnData);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }
    

});

// Robot Command Endpoints

router.post('/v1/send_command', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/send_command?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "targetRobotId": 1,
            "commandType": "Move",
            "commandDetails": "Move to room B"
        }
        
        The return object will take the form:

        {
            "status": "OK",
            "commandId": 1
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var targetRobotId = req.body.targetRobotId;
    var commandType = req.body.commandType;
    var commandDetails = req.body.commandDetails;
    
    if ((typeof jwt !== 'undefined') && (typeof targetRobotId !== 'undefined') && (typeof commandType !== 'undefined') && (typeof commandDetails !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "INSERT INTO `command_data` (`command_id`, `target_robot_id`, `command_type`, `command_details`, `command_status`, `command_request_timestamp`, `command_completion_timestamp`) VALUES (NULL, ?, ?, ?, 'Available', CURRENT_TIMESTAMP, NULL);";
                            console.log(queryString);
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [targetRobotId, commandType, commandDetails], function (err4, records2, fields2) {
                                        if (!err4) {
                                            console.log();
                                            var postResponse = {
                                                "status": "OK",
                                                "commandId": records2['insertId']
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR: Something is wrong with the post request structure."
        };

        res.send(postResponse);
    }

});

router.post('/v1/update_command_status', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/update_command_status?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "commandId": 1,
            "commandStatus": "In Progress"
        }
        
        The return object will take the form:

        {
            "status": "OK"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var commandId = req.body.commandId;
    var commandStatus = req.body.commandStatus;
    
    if ((typeof jwt !== 'undefined') && (typeof commandId !== 'undefined') && (typeof commandStatus !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `command_data` SET command_status = ? WHERE command_id = ?;";
                            console.log(queryString);
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [commandStatus, commandId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            var postResponse = {
                                                "status": "OK"
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR: Something is wrong with the post request structure."
        };

        res.send(postResponse);
    }

});

router.post('/v1/complete_command', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/complete_command?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "robotId": 1,
            "commandId": 1
        }
        
        The return object will take the form:

        {
            "status": "OK"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var robotId = req.body.robotId;
    var commandId = req.body.commandId;
    
    if ((typeof jwt !== 'undefined') && (typeof commandId !== 'undefined') && (typeof robotId !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `command_data` SET command_status = 'Completed', command_completion_timestamp = CURRENT_TIMESTAMP WHERE command_id = ?;";
                            console.log(queryString);
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [commandId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            var postResponse = {
                                                "status": "OK"
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR: Something is wrong with the post request structure."
        };

        res.send(postResponse);
    }

});

router.get("/v1/get_command_status", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_command_status?commandId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The return object will take the form:

        {
            "commandId": 1,
            "commandStatus": "In Progress"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var commandId = req.query.commandId;
    var jwt = req.query.jwt;

    if ((typeof commandId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            queryString = "SELECT `command_status` FROM `command_data` WHERE command_id = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [commandId], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var postResponse = {
                                                "commandId": commandId,
                                                "commandStatus": records2[0]['command_status']
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

router.post('/v1/update_robot_status', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/update_robot_status?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "robotId": 1,
            "robotStatus": "Charging"
        }
        
        The return object will take the form:

        {
            "status": "OK"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var robotId = req.body.robotId;
    var robotStatus = req.body.robotStatus;
    
    if ((typeof jwt !== 'undefined') && (typeof robotStatus !== 'undefined') && (typeof robotId !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            // New query string
                            queryString = "UPDATE `robot_data` SET robot_status = ? WHERE robot_id = ?;";
                            console.log(queryString);
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotStatus, robotId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            var postResponse = {
                                                "status": "OK"
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR: Something is wrong with the post request structure."
        };

        res.send(postResponse);
    }

});

router.get("/v1/get_robot_status", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_robot_status?robotId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The return object will take the form:

        {
            "robotId": 1,
            "robotStatus": "Charging"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var robotId = req.query.robotId;
    var jwt = req.query.jwt;

    if ((typeof robotId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            queryString = "SELECT `robot_status` FROM `robot_data` WHERE robot_id = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotId], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var postResponse = {
                                                "robotId": robotId,
                                                "robotStatus": records2[0]['robot_status']
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

router.post('/v1/update_robot_charge_level', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/update_robot_charge_level?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "robotId": 1,
            "robotChargeLevel": 90
        }
        
        The return object will take the form:

        {
            "status": "OK"
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var robotId = req.body.robotId;
    var robotChargeLevel = req.body.robotChargeLevel;
    
    if ((typeof jwt !== 'undefined') && (typeof robotChargeLevel !== 'undefined') && (typeof robotId !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            // New query string
                            queryString = "UPDATE `robot_data` SET robot_charge_level = ? WHERE robot_id = ?;";
                            console.log(queryString);
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotChargeLevel, robotId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            var postResponse = {
                                                "status": "OK"
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR: Something is wrong with the post request structure."
        };

        res.send(postResponse);
    }

});

router.get("/v1/get_robot_charge_level", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_robot_charge_level?robotId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The return object will take the form:

        {
            "robotId": 1,
            "robotChargeLevel": 75
        }

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var robotId = req.query.robotId;
    var jwt = req.query.jwt;

    if ((typeof robotId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            queryString = "SELECT `robot_charge_level` FROM `robot_data` WHERE robot_id = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotId], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var postResponse = {
                                                "robotId": robotId,
                                                "robotChargeLevel": records2[0]['robot_charge_level']
                                            };
                                    
                                            res.send(postResponse);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

router.get("/v1/get_available_commands", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_available_commands?robotId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The return object will take the form:

        [
            {
                "command_id": 73,
                "target_robot_id": 70,
                "command_type": "Move",
                "command_details": "Move to room A",
                "command_status": "Available",
                "command_request_timestamp": "2021-03-01T15:36:17.000Z",
                "command_completion_timestamp": null
            },
            ...
        ]

        or

        {
            "status": "ERROR"
        }

    */

    // Parameters
    var robotId = req.query.robotId;
    var jwt = req.query.jwt;

    if ((typeof robotId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            queryString = "SELECT * FROM `command_data` WHERE `target_robot_id` = ? AND `command_status` = 'Available';";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

router.get("/v1/get_all_robot_commands", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_all_robot_commands?robotId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
    */

    // Parameters
    var robotId = req.query.robotId;
    var jwt = req.query.jwt;

    if ((typeof robotId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            queryString = "SELECT * FROM `command_data` WHERE target_robot_id = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

router.get("/v1/get_focused_robot_commands", (req, res) => {
    /*
        The JSON Web Token must be a query parameter in the url
            Example: /api/itad/v1/get_focused_robot_commands?robotId=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
    */

    // Parameters
    var robotId = req.query.robotId;
    var jwt = req.query.jwt;

    if ((typeof robotId !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account, associated_robots FROM `itad_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if ( (records1.length == 1) && (records1[0]['associated_robots'].includes(robotId.toString())) ) {
                            
                            // queryString = "SELECT * FROM `command_data` WHERE `target_robot_id` = ? AND `command_status` IN ('Queued', 'In Progress', 'Completed') ORDER BY command_request_timestamp DESC LIMIT 6;";
                            queryString = "SELECT * FROM `command_data` WHERE `target_robot_id` = ? ORDER BY command_request_timestamp DESC LIMIT 6;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [robotId], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var postResponse = {
                                "status": "ERROR"
                            };
                    
                            res.send(postResponse);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        var postResponse = {
            "status": "ERROR"
        };

        res.send(postResponse);
    }
    

});

// ============================ HELPER FUNCTIONS =============================

function generateJWT(username, password) {

    var header = {
        "alg": "HS256",
        "typ": "JWT"
    };
      
    var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));
    var encodedHeader = base64url(stringifiedHeader);

    var data = {
        "username": username
    }

    var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));
    var encodedData = base64url(stringifiedData);
      
    var token = encodedHeader + "." + encodedData;

    var signature = CryptoJS.HmacSHA256(token, password);
    signature = base64url(signature);

    var signedToken = token + "." + signature;

    return signedToken;

}


function base64url(source) {
    // Encode in classical base64
    encodedSource = CryptoJS.enc.Base64.stringify(source);

    // Remove padding equal characters
    encodedSource = encodedSource.replace(/=+$/, '');

    // Replace characters according to base64url specifications
    encodedSource = encodedSource.replace(/\+/g, '-');
    encodedSource = encodedSource.replace(/\//g, '_');

    return encodedSource;
}


function generateSessionToken() {
    return crypto.randomBytes(16).toString('base64');
}

pool.query = util.promisify(pool.query);

module.exports = pool;

module.exports = router;